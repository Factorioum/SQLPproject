-- creating new database
create database Data_project;

-- using the database
use Data_project;
-- creating table
create table orders (
order_id varchar(15),
sales_date varchar(12),
sales_channel varchar(15),
currency varchar(5),
salesteam_id int,
store_id int,
product_id int,
order_qty int,
unit_price decimal,
unit_cost decimal
);

-- creating table 2
create table salesteam (
salesteam_id int not null,
salesteam text,
region text);

-- creating table 3
create table products (
product_id int not null,
Product text,
product_category text);

-- creating table 4
create table stores (
store_id int not null,
store_name text,
state_code text,
state text);

-- joining the four tables and renaming it as complete.

create table complete( 
select orders.order_id, orders.sales_date, orders.sales_channel, orders.currency, orders.salesteam_id, salesteam.salesteam, 
salesteam.region,  orders.store_id, stores.store_name, stores.state_code, stores.state,
orders.product_id, products.Product, products.product_category, orders.order_qty, orders.unit_price, orders.unit_cost
from orders 
inner join salesteam on 
orders.salesteam_id = salesteam.salesteam_id 
inner join products on 
orders.product_id = products.product_id
inner join stores on 
orders.store_id = stores.store_id);

-- Changing the date format
update complete
set sales_date = str_to_date(sales_date, '%m/%d/%y');

-- checking the new table
select *
from complete;
 
-- creating column for sales_price, cost_price and profit. 
alter table complete
add column sales_price decimal(10,2) as (order_qty * unit_price),
add column cost_price decimal(10,2) as (order_qty * unit_cost),
add column profit decimal(10,2) as (sales_price - cost_price);




-- Question 1 What is the total sales revenue generated by the company

-- filling in the column
select sum( sales_price ) as "Total Revenue"
from complete;

-- Question 2 Extract the product, order quantities and order number for product sold through the distributor and in-store only
select product, order_qty, order_id, sales_channel
from complete
where sales_channel in ('Distributor', 'in-store') order by sales_channel asc;

-- Question 3 Extract all the sales through Nicholas Cunningham
select *
from complete
where salesteam = 'Nicholas Cunningham';

-- Question 4 Extract all orders where order quantity is greater than average.
select *
from complete
where order_qty > (select avg(order_qty) from complete);

-- Question 5. What are the top 10 products based on order quantity (note: not product category) people order from the company.
select product, sum(order_qty) as order_qtys
from complete 
group by product 
order by order_qtys desc
limit 10;

-- Question 6. How many orders are sold from stores located in Alabama.
select count(*) as Alabama_order
from complete
where state = 'Alabama';

-- Question 7. Obtain all the information for order with order number “SO471”
select * 
from complete
where order_id = 'SO471';

-- Question 8. What is the average profit generated from each sales region? Sort the region in descending order of average profit generated.
select region, round(avg(profit),2)  as Region_avg_profit 
from complete
group by region
order by Region_avg_profit  desc;

-- Question 9. Using subquery, extract all data where sales price is greater than average sales price.
select * 
from complete
where (sales_price) > (select Avg(sales_price) from complete);

-- Question 10. Extract the count of orders (not order quantities) for each product category for only 
-- product category with the number of orders greater than or equals to 2000.
select product_category, count(*) 
from complete 
group by product_category
having count(*) >=  2000
order by count(*) desc;

-- Question 11. What are the company top five most expensive products and the total number of order quantities for each product?
-- Do the same for top 5 cheapest products and the order quantities for each. 
-- Your manager would like to make use of this analysis to determine if the price of a product affects the number of quantities customer orders. 

-- for top five most expensive products
select Product,  sum(order_qty) As TotalOrder_expensive, round(avg(unit_price), 2) as avg_price
from complete
group by Product
order by avg_price Desc 
limit 5;

-- for top five most cheapest products
select Product, sum(order_qty) As TotalOrder_cheap, round(avg(unit_price), 2) as avg_price
from complete
group by Product
order by avg_price 
limit 5;

-- THERE IS NO STRONG INDICATION THAT THE PRICE OF PRODUCT AFFECT THE NUMBER OF QUANTITIES ORDER AS THE 
-- LOWEST PRICE IS CLOSE IN ORDER TO THE TO ONE OF THE MOST EXPENSIVE PRODUCT. 